// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.scp.cpio.server;

// For faster allocations of sub-messages.
option cc_enable_arenas = true;

import "google/protobuf/any.proto";
import "cc/core/common/proto/common.proto";

// The CPIO service definition.
service CpioService {
  // Executes a request to perform client functionality.
  rpc Execute(ExecuteRequest) returns (ExecuteResponse) {}
  // Executes a request to create client.
  rpc CreateClient(CreateClientRequest) returns (CreateClientResponse) {}
  // Executes a request to int client.
  rpc InitClient(InitClientRequest) returns (InitClientResponse) {}
  // Executes a request to run client.
  rpc RunClient(RunClientRequest) returns (RunClientResponse) {}
  // Executes a request to stop client.
  rpc StopClient(StopClientRequest) returns (StopClientResponse) {}
}

// The request message.
message ExecuteRequest {
  google.protobuf.Any request = 1;
}

// The response message.
message ExecuteResponse {
  // The execution result.
  core.common.proto.ExecutionResult result = 1;
  // Only makes sense when the execution result is success.
  google.protobuf.Any response = 2;
}

// Configrations for MetricClient.
message MetricClientOptions {
  string metric_namespace = 1;
  bool enable_batch_recording = 2;
  int64 batch_recording_time_duration_in_ms = 3;
}

// Configrations for any CPIO client.
message ClientOptions {
  oneof client_options {
    MetricClientOptions metric_client_options = 1;
  }
}

// Request to create a CPIO client of the type given by the client_options.
message CreateClientRequest {
  ClientOptions client_options = 1;
}

// Response of a CPIO client creation.
message CreateClientResponse {
  // An identifier for the created client.
  string client_id = 1;
}

// Request to initialize a client of the given client ID.
message InitClientRequest {
  // An identifier for the client.
  string client_id = 1;
}

// Response of the client initialization.
message InitClientResponse {}

// Request to run a client of the given client ID.
message RunClientRequest {
  // An identifier for the client.
  string client_id = 1;
}

// Response of the client run.
message RunClientResponse {}

// Request to stop a client of the given client ID.
message StopClientRequest {
  // An identifier for the client.
  string client_id = 1;
}

// Response of the client stop.
message StopClientResponse {}
