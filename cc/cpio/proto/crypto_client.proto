// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.scp.cpio.crypto_client;

import "cc/cpio/proto/public_key_client.proto";
import "cc/cpio/proto/private_key_client.proto";

// For faster allocations of sub-messages.
option cc_enable_arenas = true;

enum HpkeKemProto {
  KEM_UNKNOWN = 0;
  DHKEM_X25519_HKDF_SHA256 = 1;
}

enum HpkeKdfProto {
  KDF_UNKNOWN = 0;
  HKDF_SHA256 = 1;
}

enum HpkeAeadProto {
  AEAD_UNKNOWN = 0;
  AES_128_GCM = 1;
  AES_256_GCM = 2;
  CHACHA20_POLY1305 = 3;
}

message HpkeParamsProto {
  HpkeKemProto kem = 1;
  HpkeKdfProto kdf = 2;
  HpkeAeadProto aead = 3;
}

enum SecretLengthProto {
  SECRET_LENGTH_UNKNOWN = 0;
  SECRET_LENGTH_16_BYTES = 1;
  SECRET_LENGTH_32_BYTES = 2;
}

// All data needed for HpkeEncrypt.
message HpkeEncryptProtoRequest {
  // Public key to encrypt the payload.
  public_key_client.PublicKeyProto public_key = 1;
  // Data to be encrypted.
  string payload = 2;
  // App generated associated data.
  string shared_info = 3;
  // HPKE parameters. It is optional and if not set, use the default one in
  // CPIO.
  HpkeParamsProto hpke_params = 4;
  // Enables bidirectional encryption if true.
  bool is_bidirectional = 5;
  // Only to be used when is_bidirectional is true. The same HPKE context will
  // export the same secret when the exporter_context and secret_length are the
  // same. Make sure the exporter_context and secret_length match in HpkeEncrypt
  // and HpkeDecrypt to get the same secret. If not set, "aead key" will be used
  // by default.
  string exporter_context = 6;
  // Only to be used when is_bidirectional is true. If not set,
  // SECRET_LENGTH_16_BYTES will be used be default.
  SecretLengthProto secret_length = 7;
}

// Encrypted data for HPKE. Do not put data which should not be sent over wire
// here.
message HpkeEncryptedData {
  // Contains encapsulated key and the actual payload.
  bytes ciphertext = 1;
  // The identifier of a pair of public key and private key.
  string key_id = 2;
}

// Result from HpkeEcrypt.
message HpkeEncryptProtoResponse {
  // Encrypted data.
  HpkeEncryptedData encrypted_data = 1;
  // Only be present in bi-directional encryption to decrypt the response. Don't
  // send it over wire.
  string secret = 2;
}

// All data needed for HpkeDecrypt.
message HpkeDecryptProtoRequest {
  // Private key to decrypt the encrypted_data.
  private_key_client.PrivateKeyProto private_key = 1;
  // Encrypted data.
  HpkeEncryptedData encrypted_data = 2;
  // App generated associated data. Make sure it matches the one for encrypt.
  string shared_info = 3;
  // HPKE parameters. It is optional and if not set, use the default one in
  // CPIO.
  HpkeParamsProto hpke_params = 4;
  // Enables bidirectional encryption if true.
  bool is_bidirectional = 5;
  // Only to be used when is_bidirectional is true. The same HPKE context will
  // export the same secret when the exporter_context and secret_length are the
  // same. Make sure the exporter_context and secret_length match in HpkeEncrypt
  // and HpkeDecrypt to get the same secret. If not set, "aead key" will be used
  // by default.
  string exporter_context = 6;
  // Only to be used when is_bidirectional is true. If not set,
  // SECRET_LENGTH_16_BYTES will be used be default.
  SecretLengthProto secret_length = 7;
}

// Result from HpkeDecrypt.
message HpkeDecryptProtoResponse {
  // Decypted payload.
  string payload = 1;
  // Only be present in bi-directional encryption to encrypt the response. Don't
  // send it over wire.
  string secret = 2;
}

// All data needed for AeadEncrypt.
message AeadEncryptProtoRequest {
  // Data to be encrypted.
  string payload = 1;
  // Secret to generate Aead.
  string secret = 2;
  // App generated associated data.
  string shared_info = 3;
}

// Encrypted data for Aead. Do not put data which should not be sent over wire
// here.
message AeadEncryptedData {
  // Encryped payload.
  bytes ciphertext = 1;
}

// Result from AeadEncrypt.
message AeadEncryptProtoResponse {
  // Encrypted data.
  AeadEncryptedData encrypted_data = 1;
}

// All data needed for AeadDecrypt.
message AeadDecryptProtoRequest {
  // Encrypted data.
  AeadEncryptedData encrypted_data = 1;
  // Secret to generate Aead.
  string secret = 2;
  // App generated associated data.
  string shared_info = 3;
}

// Result from AeadDecrypt.
message AeadDecryptProtoResponse {
  // Decypted payload.
  string payload = 1;
}
