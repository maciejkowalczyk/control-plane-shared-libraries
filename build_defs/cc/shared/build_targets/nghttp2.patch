diff --git a/src/asio_io_service_pool.cc b/src/asio_io_service_pool.cc
index 01483664..132bb252 100644
--- a/src/asio_io_service_pool.cc
+++ b/src/asio_io_service_pool.cc
@@ -58,9 +58,17 @@ void io_service_pool::run(bool asynchronous) {
   // Create a pool of threads to run all of the io_services.
   for (std::size_t i = 0; i < io_services_.size(); ++i) {
     futures_.push_back(std::async(std::launch::async,
-                                  (size_t(boost::asio::io_service::*)(void)) &
-                                      boost::asio::io_service::run,
-                                  io_services_[i]));
+                                  [io_service = io_services_[i]]() {
+                                    for(;;) {
+                                      try {
+                                        auto ct = io_service->run();
+                                        return ct;
+                                      }
+                                      catch (...) {
+                                      }
+                                    }
+                                    return 0UL;
+                                  }));
   }
 
   if (!asynchronous) {
-- 
diff --git a/src/asio_server.cc b/src/asio_server.cc
index 74c92276..6d262336 100644
--- a/src/asio_server.cc
+++ b/src/asio_server.cc
@@ -188,7 +188,13 @@ void server::start_accept(tcp::acceptor &acceptor, serve_mux &mux) {
 
 void server::stop() {
   for (auto &acceptor : acceptors_) {
-    acceptor.close();
+    std::promise<void> promise;
+    GET_IO_SERVICE(acceptor).dispatch([&acceptor, &promise]() {
+      boost::system::error_code ignored_ec;
+      acceptor.close(ignored_ec);
+      promise.set_value();
+    });
+    promise.get_future().get();
   }
   io_service_pool_.stop();
 }
--
diff --git a/src/asio_server_http2_handler.cc b/src/asio_server_http2_handler.cc
index c1fc195f..46778f3d 100644
--- a/src/asio_server_http2_handler.cc
+++ b/src/asio_server_http2_handler.cc
@@ -298,7 +298,7 @@ int http2_handler::start() {
     return -1;
   }
 
-  nghttp2_settings_entry ent{NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS, 100};
+  nghttp2_settings_entry ent{NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS, 10000};
   nghttp2_submit_settings(session_, NGHTTP2_FLAG_NONE, &ent, 1);
 
   return 0;
-- 
diff --git a/src/asio_server_connection.h b/src/asio_server_connection.h
index a9489658..7756848c 100644
--- a/src/asio_server_connection.h
+++ b/src/asio_server_connection.h
@@ -87,10 +87,15 @@ public:
   /// Start the first asynchronous operation for the connection.
   void start() {
     boost::system::error_code ec;
+    std::weak_ptr<connection> weak_self = this->shared_from_this();
 
     handler_ = std::make_shared<http2_handler>(
         GET_IO_SERVICE(socket_), socket_.lowest_layer().remote_endpoint(ec),
-        [this]() { do_write(); }, mux_);
+        [weak_self]() {
+          auto shared_connection = weak_self.lock();
+          if (!shared_connection) { return; }
+          shared_connection->do_write();
+        }, mux_);
     if (handler_->start() != 0) {
       stop();
       return;
-- 
diff --git a/src/asio_client_session_impl.cc b/src/asio_client_session_impl.cc
index a32c024e..a1bf96e1 100644
--- a/src/asio_client_session_impl.cc
+++ b/src/asio_client_session_impl.cc
@@ -579,7 +579,7 @@ const request *session_impl::submit(boost::system::error_code &ec,
 }
 
 void session_impl::shutdown() {
-  if (stopped_) {
+  if (session_ == nullptr || stopped_) {
     return;
   }
 
-- 